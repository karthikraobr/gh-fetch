// Code generated by MockGen. DO NOT EDIT.
// Source: internal/gh/gh.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/v32/github"
	gh "github.com/karthikraobr/gh-fetch/internal/gh"
	reflect "reflect"
)

// MockFetcher is a mock of Fetcher interface
type MockFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockFetcherMockRecorder
}

// MockFetcherMockRecorder is the mock recorder for MockFetcher
type MockFetcherMockRecorder struct {
	mock *MockFetcher
}

// NewMockFetcher creates a new mock instance
func NewMockFetcher(ctrl *gomock.Controller) *MockFetcher {
	mock := &MockFetcher{ctrl: ctrl}
	mock.recorder = &MockFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFetcher) EXPECT() *MockFetcherMockRecorder {
	return m.recorder
}

// ListRepositories mocks base method
func (m *MockFetcher) ListRepositories(ctx context.Context, username string, opt *github.RepositoryListOptions) ([]*gh.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositories", ctx, username, opt)
	ret0, _ := ret[0].([]*gh.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositories indicates an expected call of ListRepositories
func (mr *MockFetcherMockRecorder) ListRepositories(ctx, username, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositories", reflect.TypeOf((*MockFetcher)(nil).ListRepositories), ctx, username, opt)
}

// ListCommits mocks base method
func (m *MockFetcher) ListCommits(ctx context.Context, username, repoName string, opt *github.CommitsListOptions) ([]*gh.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommits", ctx, username, repoName, opt)
	ret0, _ := ret[0].([]*gh.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommits indicates an expected call of ListCommits
func (mr *MockFetcherMockRecorder) ListCommits(ctx, username, repoName, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommits", reflect.TypeOf((*MockFetcher)(nil).ListCommits), ctx, username, repoName, opt)
}
