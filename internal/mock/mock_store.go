// Code generated by MockGen. DO NOT EDIT.
// Source: internal/store/store.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	gh "github.com/karthikraobr/gh-fetch/internal/gh"
	reflect "reflect"
)

// MockDB is a mock of DB interface
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// GetRepository mocks base method
func (m *MockDB) GetRepository(id int64) (*gh.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepository", id)
	ret0, _ := ret[0].(*gh.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepository indicates an expected call of GetRepository
func (mr *MockDBMockRecorder) GetRepository(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*MockDB)(nil).GetRepository), id)
}

// CreateRepository mocks base method
func (m *MockDB) CreateRepository(r *gh.Repository) (*gh.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepository", r)
	ret0, _ := ret[0].(*gh.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepository indicates an expected call of CreateRepository
func (mr *MockDBMockRecorder) CreateRepository(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepository", reflect.TypeOf((*MockDB)(nil).CreateRepository), r)
}

// GetRepositories mocks base method
func (m *MockDB) GetRepositories(username string) ([]*gh.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositories", username)
	ret0, _ := ret[0].([]*gh.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositories indicates an expected call of GetRepositories
func (mr *MockDBMockRecorder) GetRepositories(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositories", reflect.TypeOf((*MockDB)(nil).GetRepositories), username)
}

// CreateRepositories mocks base method
func (m *MockDB) CreateRepositories(r []*gh.Repository) ([]*gh.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepositories", r)
	ret0, _ := ret[0].([]*gh.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepositories indicates an expected call of CreateRepositories
func (mr *MockDBMockRecorder) CreateRepositories(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepositories", reflect.TypeOf((*MockDB)(nil).CreateRepositories), r)
}

// GetRepositoriesOrderedBy mocks base method
func (m *MockDB) GetRepositoriesOrderedBy(username string, limit int, sort, sortBy string) ([]*gh.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoriesOrderedBy", username, limit, sort, sortBy)
	ret0, _ := ret[0].([]*gh.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositoriesOrderedBy indicates an expected call of GetRepositoriesOrderedBy
func (mr *MockDBMockRecorder) GetRepositoriesOrderedBy(username, limit, sort, sortBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoriesOrderedBy", reflect.TypeOf((*MockDB)(nil).GetRepositoriesOrderedBy), username, limit, sort, sortBy)
}
